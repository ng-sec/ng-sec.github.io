<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/07/16/bo-ke-da-jian/"/>
      <url>/2019/07/16/bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第1章 企业信息安全建设简介</title>
      <link href="/2019/04/24/20190424-di-1-zhang-qi-ye-xin-xi-an-quan-jian-she-jian-jie/"/>
      <url>/2019/04/24/20190424-di-1-zhang-qi-ye-xin-xi-an-quan-jian-she-jian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-安全的本质"><a href="#1-1-安全的本质" class="headerlink" title="1.1 安全的本质"></a>1.1 安全的本质</h2><p>思考几个问题：</p><ul><li>企业信息安全到底该怎么做？</li><li>管理、技术、流程和人员哪个更重要？</li><li>安全团队和安全人才该怎么建设、培养和激励？</li><li>最终，理解信息安全的本质是什么？？</li></ul><p>​     在大多数系统设计初期，是本着互相信任的原则。但是这些信任可能被外部人员利用，比如SQL注入，就是由于开发人员信任了用户的输入；钓鱼站点就是因为用户对钓鱼站点信任导致被钓鱼。</p><p>​     安全的本质就是构建信任的过程，我们要在这个过程找到自己的那个可以接受的信任点，并且取得成本和效益的平衡。</p><ul><li>普通企业，在建设安全时，会假设安全人员、开发人员、运维人员都是默认被信任的</li><li>安全要求更高的企业（金融和政府），安全人员、开发人员、运维人员默认是不被信任的。</li></ul><h2 id="1-2-安全的原则"><a href="#1-2-安全的原则" class="headerlink" title="1.2 安全的原则"></a>1.2 安全的原则</h2><h3 id="1-2-1-持续改进-PDCA"><a href="#1-2-1-持续改进-PDCA" class="headerlink" title="1.2.1 持续改进 PDCA"></a>1.2.1 持续改进 PDCA</h3><pre><code> 安全不是一劳永逸的，没有万能的工具。因为攻击环境在不断变化，不断发展，安全要走在前面。同时，企业买了大量的安全设备，比如IDS，防火墙，SIEM，在到现在的安全情报系统。单本质上还是检测规则，进行异常模式识别。需要靠人来管理和实现并且持续的改进。</code></pre><p><u>Tips：如何检查一个安全工作人员是否工作到位，是否有做到要求的due care。</u></p><p><u>可以通过审计，KPI，工作结果等等这些来衡量</u></p><h3 id="1-2-2-纵深防御"><a href="#1-2-2-纵深防御" class="headerlink" title="1.2.2 纵深防御"></a>1.2.2 纵深防御</h3><p>​        纵深防御是在安全界普遍认可的一个理念。也就是在企业的IT系统会分为不同的区域，从网络层、虚拟层、系统层、应用层，到数据层、用户层、业务层、总控层防御。如果攻击者利用web应用获取到较低权限的webshell，然后再进行提权，在横向渗透然后获取更多的权限。<em><u>如果在这条攻击链任意一个环节能够设置安全的检测和防御措施，攻击都可能被检测和阻止。</u></em></p><h3 id="1-2-3-非对称"><a href="#1-2-3-非对称" class="headerlink" title="1.2.3 非对称"></a>1.2.3 非对称</h3><p>​        一直存在这样的偏差，安全和攻击的不对等性。攻击是一个点，安全却需要一个面。破坏永远比建设要容易的多。</p><p>​        如何扭转这种局面？</p><p>​        在这种情境下，各种”蜜”的产品应用而生，蜜网站、蜜域名、蜜数据库…</p><h2 id="1-3-安全世界观"><a href="#1-3-安全世界观" class="headerlink" title="1.3 安全世界观"></a>1.3 安全世界观</h2><p>​        也就是要建立解决安全问题的思路，以及看待安全问题的角度和高度。</p><p>​        信息安全就是博弈和对抗，就是对信息资产的控制争夺赛</p><h2 id="1-4-正确处理几个关系"><a href="#1-4-正确处理几个关系" class="headerlink" title="1.4 正确处理几个关系"></a>1.4 正确处理几个关系</h2><h3 id="1-4-1-科学与艺术"><a href="#1-4-1-科学与艺术" class="headerlink" title="1.4.1 科学与艺术"></a>1.4.1 科学与艺术</h3><p>​        安全是一门科学也是一门艺术。</p><p>​        科学指的是：像科学一样具有<strong>严谨和严肃</strong>的特点。不论是安全体系还是安全措施。企业安全建设中，必须考虑<strong>全面、整体、综合性</strong>的考虑安全，并认真、踏实地落地实施。</p><p>​        自己的理解：也就是说安全一定要全面，对所有信息资产都要从整体方面考虑安全性。</p><p>​        艺术性指的是：安全工作的权变（灵活），不断的去<strong>权衡利弊</strong>。比如：服务器安全基线根据所处安全域的不同有不同的基线标准，漏洞跟踪处理时，安全部门通过补偿措施降低风险，允许一些系统带病上线是权变的体现。</p><h3 id="1-4-2-管理与技术"><a href="#1-4-2-管理与技术" class="headerlink" title="1.4.2 管理与技术"></a>1.4.2 管理与技术</h3><p>​        <strong>管理和技术必须两手抓、两手要硬。</strong>    要做到相辅相成</p><p>​        从安全管理角度看，如果没有技术和自动化手段保障，安全政策和流程就无法有效的落地。而脱离安全技术的安全政策和流程也可能是失效的．管理 10台和1000台服务器，同样的安全政策和流程肯定是行不通的。</p><p>​        从安全技术的角度看，没有管理的辅助，可能会变成“为了技术而技术”的模式。<em><u>要把技术用在刀刃上。</u></em></p><h3 id="1-4-3-业务与安全"><a href="#1-4-3-业务与安全" class="headerlink" title="1.4.3 业务与安全"></a>1.4.3 业务与安全</h3><p>​        <u>有很多人认为安全和业务是相背离的。其实不然，举个例子，业务好比一台跑车，安全好比这个跑车上的刹车。跑车开动后一直全速前进，我们在弯道的时候需要适当的减速，然后再提速前进。那么业务也一样，需要安全来帮助其发展的更平稳。</u></p><p>​        有时候安全总会被业务团队抱怨，这也不能做，那也不能做。那么安全管理人员就要反思了，是不是安全阻碍了业务的发展，是不是有更好的安全解决方案。有时候设计方案出发点并不是业务和服务，而是以省事、尽量少担责为出发点。那么这样设计出的安全解决方案可想而知。如果能够改进安全方案，尽量在降低甚至不降低业务发展的情况下还能保证安全，业务团队和开发运维当然是欢迎的，毕竟谁会愿意冒着巨大的风险去上线新业务。</p><p>​        所以一个好的安全团队需要和业务、运维站在统一立场来面对企业的发展，设计出合理的安全方案，从业务角度出发去思考，一定是会越走越顺畅。</p><h3 id="1-4-4-甲方和乙方"><a href="#1-4-4-甲方和乙方" class="headerlink" title="1.4.4 甲方和乙方"></a>1.4.4 甲方和乙方</h3><p>​        每一方要对自己有深刻的认识。</p><ul><li>甲方的立场，应该对自己承担的职责负责，不管什么方法，最终目的是要搞定安全问题。所以甲方首先要有能力去判断哪些乙方能够满足自己的某一块安全需求，能够有能力在你出问题的时候，解决问题。同时要从安全的角度出发对乙方做审核、管理。</li><li>乙方的立场，要对自己的承诺负责，不能随便忽悠。<u>要真正了解你的客户，客户的需求，客户的业务，这样才能真正为客户提供其想要的价值。</u></li></ul><h2 id="1-5-安全趋势"><a href="#1-5-安全趋势" class="headerlink" title="1.5 安全趋势"></a>1.5 安全趋势</h2><p>安全要走在前面，要放眼未来的趋势，早做打算。</p><h3 id="1-5-1-安全度量"><a href="#1-5-1-安全度量" class="headerlink" title="1.5.1 安全度量"></a>1.5.1 安全度量</h3><p>​    思考个问题：如何衡量企业实时安全的效果？</p><p>​    做安全的人遇到的最大的挑战就是讲不清楚安全的价值。安全这个东西很奇妙，也很尴尬。它不像业务可以用销售额和用户来衡量，也不像研发可以用bug数、项目完成率、扩展性、专利等来衡量。安全往往是事件性的，你可能什么都不做，一年都不出问题，也可能做了很多，却问题频出。所以很难用单一事件来评判安全做的好与不好。    </p><p>​    企业做安全最终还是要对结果负责，对与安全效果，有<strong>两个核心的指标</strong>：一个是漏洞数，一个是安全事件数。这两个关键安全指标，却没有一个安全厂商愿意承诺。</p><p>​    安全漏洞数一般分为两类：一类是通过众测与SRC获得的<strong>外部上报漏洞数量</strong>，一类是通过<strong>自身安全和检测发现的安全漏洞数量</strong>。近几年的红蓝对抗，以及国家组织的护网行动也是安全度量的一种，也是未来的趋势。    </p><p>​     安全事件的情况和漏洞大体相同，不同的是，安全事件是没有第三方报告平台的，数据主要来自于监管通报等被动暴露以及主动发现，数据统计要更难一些。</p><h3 id="1-5-2-历史问题的免疫"><a href="#1-5-2-历史问题的免疫" class="headerlink" title="1.5.2 历史问题的免疫"></a>1.5.2 历史问题的免疫</h3><p>​        运维管理目前的标准是ISO20000服务管理体系，也就是ITIL运维流程管理，ITIL有个核心流程就是问题管理。关键是对历史故障的举一反三的持续改进，从而实现对历史故障的免疫。</p><p>​        同样安全管理也应该做到历史问题免疫。其一，需要对企业曾经出现的<strong>安全漏洞和安全事件</strong>做举一反三的彻底整改，从<strong>人、技术、流程、资源四个维度</strong>分析问题产生的根源，查找差距，并建立机制进行防护，从而<strong>根本上解决已出现的安全问题</strong>，实现历史安全问题免疫。二是对已经部署的安全措施做100%确认，比如已经部署了防病毒软件，一定要关注防病毒安装率、正常率两个指标，这两个指标能做到99.99%的应该算是执行率和<strong>安全有效性</strong>不错的企业了。</p><h3 id="1-5-3-安全成为属性"><a href="#1-5-3-安全成为属性" class="headerlink" title="1.5.3 安全成为属性"></a>1.5.3 安全成为属性</h3><p>​        越来越多的企业重视信息安全，这种重视可能是主动地，但是被动居多。<u>5年前我接触的大多数企业都是业务先行，事件驱动型的、监管驱动的。</u>发展到了今天，无论是运维、开发还是企业用户甚至高管都要有安全的理念。</p><h3 id="1-5-4-安全人才缺口增大"><a href="#1-5-4-安全人才缺口增大" class="headerlink" title="1.5.4 安全人才缺口增大"></a>1.5.4 安全人才缺口增大</h3><p>​        安全行业是典型的“活到老、学到老”的行业，逆水行舟，不进则退。<u>其实整个IT行业亦是如此。而安全所欠缺的是综合性人才。简单说就是技术+管理的综合能力。管理不能飘在上面，而安全技术也应该有管理的思维，只有两者结合起来才能把企业的安全做好。</u></p><h2 id="1-6-总结"><a href="#1-6-总结" class="headerlink" title="1.6 总结"></a>1.6 总结</h2><p>​        看完这些，可以大概对安全有个宏观上的认识，指明了安全的大方向。</p>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 金融企业信息安全建设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建</title>
      <link href="/2018/04/24/20180605-tong-guo-github-hexo-da-jian-ge-ren-wang-zhan/"/>
      <url>/2018/04/24/20180605-tong-guo-github-hexo-da-jian-ge-ren-wang-zhan/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00.前言"></a>0x00.前言</h1><ul><li><p>为什么要搭建博客?</p><p>俗话说”好尽心不如烂笔头”.</p><p>第1点,当今数据爆炸的时代来讲,建设自己的博客能够把海量的文字,代码,书籍以及音视频转换成为自己的知识库,输出的过程也是对知识记忆和理解的过程.例如,本人在考CISSP时做了2遍笔记,对知识的理解以及工作是有很大帮助的。后来给公司做内部培训和外部的交流都能从中汲取或者找到共鸣。</p><p>第2点,通过博客平台构建和梳理自己的知识体系,然后将知识或观点分享出来,也希望能够与大家一起交流或者给遇到问题的朋友一点点帮助.利人利己的事情,何乐而不为.</p><p>最后,借助博客来记录关于工作和生活的一些观点。</p></li><li><p>博客写什么?</p><p>本人大学计算机专业,目前从事信息安全行业.本博客主要以信息安全为主。</p></li><li><p>为什么选择Hexo?</p><ul><li>搭建简单</li><li>支持中文</li><li>支持Markdown编写</li><li>主题插件丰富</li></ul></li></ul><h1 id="0x01-Hexo简介"><a href="#0x01-Hexo简介" class="headerlink" title="0x01.Hexo简介"></a>0x01.Hexo简介</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。这里我们选用的是GitHub，Hexo同时也是GitHub上的开源项目，参见：<a href="https://link.zhihu.com/?target=https%3A//github.com/hexojs/hexo" target="_blank" rel="noopener">hexojs/hexo</a> 如果想要更加全面的了解Hexo，可以到其官网 <a href="https://link.zhihu.com/?target=https%3A//hexo.io/" target="_blank" rel="noopener">Hexo</a> 了解更多的细节，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。这里，默认各位猿/媛儿都知道GitHub就不再赘述。</p><h1 id="0x02-搭建步骤"><a href="#0x02-搭建步骤" class="headerlink" title="0x02. 搭建步骤"></a>0x02. 搭建步骤</h1><h2 id="2-1-获取个人网站域名"><a href="#2-1-获取个人网站域名" class="headerlink" title="2.1 获取个人网站域名"></a>2.1 获取个人网站域名</h2><p>域名是网站的入口，也是网站的第一印象，比如饿了么的官网的域名是：<a href="https://link.zhihu.com/?target=https%3A//www.ele.me/" target="_blank" rel="noopener">https://www.ele.me/</a> ，很是巧妙。常见的有com,cn,net,org等后缀，也有小众的xyz,me,io等后缀，根据你自己的喜好，选择不同的后缀，比如我选择就是常见的com后缀。很多小众奇特的后缀在大陆是没办法备案的，网站也就无法上线。然而使用GitHub托管我们的网站，完全不需要备案，因为托管我们的网站内容的服务器在美国，而且在国内备案流程也比较繁杂，时间需要一周左右。</p><p>申请域名的地方有很多，这里推荐阿里云：<a href="https://link.zhihu.com/?target=https%3A//www.aliyun.com/" target="_blank" rel="noopener">阿里云-为了无法计算的价值</a> 申请入口：<a href="https://link.zhihu.com/?target=https%3A//wanwang.aliyun.com/domain/" target="_blank" rel="noopener">域名注册</a> 购买域名这也是我们整个搭建过程中惟一一个需要花钱的地方。如果你已经有了空闲域名就无需购买，直接使用即可。</p><h2 id="2-2-Github创建个人仓库"><a href="#2-2-Github创建个人仓库" class="headerlink" title="2.2 Github创建个人仓库"></a>2.2 Github创建个人仓库</h2><p>登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：<a href="https://link.zhihu.com/?target=https%3A//github.com/" target="_blank" rel="noopener">Build software better, together</a> 点击GitHub中的New repository创建新仓库，仓库名应该为：<strong>用户名</strong>.<a href="http://github.io" target="_blank" rel="noopener">http://github.io</a> 这个<strong>用户名</strong>使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为：ng-sec.github.io</p><h2 id="2-3-安装配置git"><a href="#2-3-安装配置git" class="headerlink" title="2.3 安装配置git"></a>2.3 安装配置git</h2><blockquote><p>git使用教程可以参考廖雪峰git教程：<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600</a></p></blockquote><p>什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。如果想要了解Git的细节，参看<a href="https://link.zhihu.com/?target=http%3A//weibo.com/liaoxuefeng" target="_blank" rel="noopener">廖雪峰</a>老师的Git教程：<a href="https://link.zhihu.com/?target=http%3A//www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程</a> 从Git官网下载：<a href="https://link.zhihu.com/?target=https%3A//git-scm.com/download/win" target="_blank" rel="noopener">Git - Downloading Package</a> 现在的机子基本都是64位的，选择64位的安装包，下载后安装，在命令行里输入git测试是否安装成功，若安装失败，参看其他详细的Git安装教程。安装成功后，将你的Git与GitHub帐号绑定，鼠标右击打开Git Bash</p><h3 id="2-3-1-Ubuntu安装和配置git"><a href="#2-3-1-Ubuntu安装和配置git" class="headerlink" title="2.3.1 Ubuntu安装和配置git"></a>2.3.1 Ubuntu安装和配置git</h3><blockquote><p>我用的是Ubuntu18.04 ，安装配置方法如下</p></blockquote><ul><li>安装</li></ul><pre class=" language-shell"><code class="language-shell">$ gitThe program 'git' is currently not installed. You can install it by typing:$sudo apt-get install gitgithub git config --global user.name "ng-sec"github git config --global user.email "13716122960@163.com"</code></pre><pre><code>git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot;</code></pre><h3 id="2-3-2-配置git"><a href="#2-3-2-配置git" class="headerlink" title="2.3.2 配置git"></a>2.3.2 配置git</h3><h4 id="1-初始化git"><a href="#1-初始化git" class="headerlink" title="(1)初始化git"></a>(1)初始化git</h4><pre class=" language-shell"><code class="language-shell">$github cd ng-sec$ng-sec ls$ng-sec pwd/home/robin/github/ng-sec$ng-sec git init 已初始化空的 Git 仓库于 /home/robin/github/ng-sec/.git/ng-sec git:(master) ls -a.  ..  .git</code></pre><p>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p><h4 id="2-生成ssh密钥文件并关联github"><a href="#2-生成ssh密钥文件并关联github" class="headerlink" title="(2)生成ssh密钥文件并关联github"></a>(2)生成ssh密钥文件并关联github</h4><blockquote><p>由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：</p></blockquote><ul><li>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</li></ul><pre class=" language-shell"><code class="language-shell">$ ssh-keygen -t rsa -C "youremail@example.com"ng-sec git:(master) ssh-keygen -t rsa -C "13716122960@163.com"Generating public/private rsa key pair.Enter file in which to save the key (/home/robin/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in ng-sec.Your public key has been saved in ng-sec.pub.The key fingerprint is:SHA256:pg0wHjlYrVDlHW/EiHFZT5FzjWmnEPA9i2uCfCmtgxI 13716122960@163.comThe key's randomart image is:+---[RSA 2048]----+|   .ooooo=+.++ + ||  .o oooo+.++.= o||  ..*.. . o o=oo ||   ..=   .   ..o ||    . . S   . .  ||    E  * o . .   ||     ...= = o    ||    . . .+ o     ||     .  ..       |+----[SHA256]-----+➜  ng-sec git:(master) ✗ ng-sec git:(master) ✗ cd /home/robin/.ssh ➜  .ssh lsid_rsa  id_rsa.pub</code></pre><p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p><p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p><ul><li>第2步:登录github，打开“Account settings”，“SSH Keys”页面，然后，点“Add SSH Key”，填上任意Title，Key文本框里粘贴id_rsa.pub文件的内容</li></ul><p><img src="https://www.github.com/ng-sec/graphbed/raw/master/ng-sec/1563177727297.png" alt="enter description here"></p><ul><li>第3步:测试ssh</li></ul><pre class=" language-shell"><code class="language-shell"> $.ssh ssh git@github.comThe authenticity of host 'github.com (13.250.177.223)' can't be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)? yesFailed to add the host to the list of known hosts (/home/robin/.ssh/known_hosts).PTY allocation request failed on channel 0Hi ng-sec! You've successfully authenticated, but GitHub does not provide shell access.Connection to github.com closed.</code></pre><p>可以看到已经成功认证成功了</p><p>##2.4 安装Node.js</p><h2 id="2-5-安装Node-js"><a href="#2-5-安装Node-js" class="headerlink" title="2.5 安装Node.js"></a>2.5 安装Node.js</h2><p>Hexo基于Node.js，Node.js下载地址：<a href="https://link.zhihu.com/?target=https%3A//nodejs.org/en/download/" target="_blank" rel="noopener">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v </p><blockquote><p>可以参考：<a href="https://www.simon96.online/2018/11/10/hexo-env/" target="_blank" rel="noopener">https://www.simon96.online/2018/11/10/hexo-env/</a></p></blockquote><pre class=" language-shell"><code class="language-shell"> ~ node -vv8.10.0</code></pre><h2 id="2-6-hexo设置"><a href="#2-6-hexo设置" class="headerlink" title="2.6 hexo设置"></a>2.6 hexo设置</h2><h3 id="2-6-1-安装hexo"><a href="#2-6-1-安装hexo" class="headerlink" title="2.6.1 安装hexo"></a>2.6.1 安装hexo</h3><pre class=" language-shell"><code class="language-shell">sudo npm install -g hexo-cli[sudo] robin 的密码： /usr/local/bin/hexo -> /usr/local/lib/node_modules/hexo-cli/bin/hexo/usr/local/lib</code></pre><h3 id="2-6-2-初始化hexo"><a href="#2-6-2-初始化hexo" class="headerlink" title="2.6.2 初始化hexo"></a>2.6.2 初始化hexo</h3><pre><code>$ cd /home/robin/github/ng-sec$ hexo init ng-sec.github.io$ cd ng-sec.github.io $ npm install</code></pre><h3 id="2-6-3-测试hexo网站"><a href="#2-6-3-测试hexo网站" class="headerlink" title="2.6.3 测试hexo网站"></a>2.6.3 测试hexo网站</h3><pre class=" language-bash"><code class="language-bash"><span class="token variable">$pwd</span>ng-sec.github.io git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ <span class="token function">pwd</span>/home/robin/github/ng-sec/ng-sec.github.io<span class="token variable">$hexo</span> new test_my_site<span class="token variable">$hexo</span> g<span class="token variable">$hexo</span> s</code></pre><p><a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><p><img src="https://www.github.com/ng-sec/graphbed/raw/master/ng-sec/1563180403602.png" alt="enter description here"></p><h2 id="2-6-推送网站"><a href="#2-6-推送网站" class="headerlink" title="2.6 推送网站"></a>2.6 推送网站</h2><h2 id="2-7-绑定域名"><a href="#2-7-绑定域名" class="headerlink" title="2.7 绑定域名"></a>2.7 绑定域名</h2><h2 id="2-8-绑定域名"><a href="#2-8-绑定域名" class="headerlink" title="2.8 绑定域名"></a>2.8 绑定域名</h2><h3 id="2-9-通过Markdown来编写博客"><a href="#2-9-通过Markdown来编写博客" class="headerlink" title="2.9 通过Markdown来编写博客"></a>2.9 通过Markdown来编写博客</h3><h3 id="2-10-发布文章"><a href="#2-10-发布文章" class="headerlink" title="2.10 发布文章"></a>2.10 发布文章</h3><h3 id="2-11-构建自己的图床"><a href="#2-11-构建自己的图床" class="headerlink" title="2.11 构建自己的图床"></a>2.11 构建自己的图床</h3><h3 id="2-12-个性化设置"><a href="#2-12-个性化设置" class="headerlink" title="2.12 个性化设置"></a>2.12 个性化设置</h3><p>##</p><h2 id="3-Github站点维护与更新"><a href="#3-Github站点维护与更新" class="headerlink" title="3. Github站点维护与更新"></a>3. Github站点维护与更新</h2><h2 id="3-1-Git-HTTP方式克隆远程仓库到本地"><a href="#3-1-Git-HTTP方式克隆远程仓库到本地" class="headerlink" title="3.1 Git HTTP方式克隆远程仓库到本地"></a>3.1 Git HTTP方式克隆远程仓库到本地</h2><h3 id="3-1-1-操作步骤"><a href="#3-1-1-操作步骤" class="headerlink" title="3.1.1 操作步骤"></a>3.1.1 操作步骤</h3><ul><li>登录github ，复制github 项目的https 地址。</li><li>在我们的本地磁盘下创建文件夹用来保存我们的远程git项目。</li><li>通过<strong>git clone 远程仓库地址</strong> 克隆我们远程仓库的项目</li></ul><h3 id="3-1-2-操作演示"><a href="#3-1-2-操作演示" class="headerlink" title="3.1.2 操作演示"></a>3.1.2 操作演示</h3><ul><li>第1步:登录github复制需要的github项目的https地址</li></ul><p><img src="https://www.github.com/ng-sec/graphbed/raw/master/ng-sec/1563179274282.png" alt="enter description here"></p><ul><li>第2步:在本地磁盘创建文件夹来保存git项目</li></ul><pre class=" language-shell"><code class="language-shell">$ cd /home/robin/githubgit:(master) ✗ git clone https://github.com/ng-sec/ng-sec.github.io.git正克隆到 'ng-sec.github.io'...remote: Enumerating objects: 366, done.remote: Counting objects: 100% (366/366), done.remote: Compressing objects: 100% (218/218), done.remote: Total 366 (delta 83), reused 361 (delta 78), pack-reused 0接收对象中: 100% (366/366), 6.57 MiB | 278.00 KiB/s, 完成.处理 delta 中: 100% (83/83), 完成.</code></pre><h2 id="3-2-换电脑了如何通过hexo从远程pull到本地"><a href="#3-2-换电脑了如何通过hexo从远程pull到本地" class="headerlink" title="3.2 换电脑了如何通过hexo从远程pull到本地"></a>3.2 换电脑了如何通过hexo从远程pull到本地</h2><p>作者：CrazyMilk</p><p>链接：<a href="https://www.zhihu.com/question/21193762/answer/79109280" target="_blank" rel="noopener">https://www.zhihu.com/question/21193762/answer/79109280</a></p><p>来源：知乎</p><p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>其实，Hexo生成的文件里面是有一个.gitignore的，所以它的本意应该也是想我们把这些文件放到GitHub上存放的。但是考虑到如果每个GitHub Pages都需要额外的一个仓库存放这些文件，就显得特别冗余了。这个时候就可以用分支的思路！一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页。</p><p>最近我也用GitHub Pages搭建了一个独立博客，想到了这个方法，使用之后真的特别简洁。为了更直观地说明，奉上使用这种方法不同时候的流程：</p><p>———————————————————–  华丽的分割线1 ———————————————————-<br>一、关于搭建的流程</p><ol><li>创建仓库，<a href="http://CrazyMilk.github.io；" target="_blank" rel="noopener">http://CrazyMilk.github.io；</a></li><li>创建两个分支：master 与 hexo；</li><li>设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；</li><li>使用git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:CrazyMilk/CrazyMilk.github.io.git拷贝仓库；</li><li>在本地<a href="http://CrazyMilk.github.io文件夹下通过Git" target="_blank" rel="noopener">http://CrazyMilk.github.io文件夹下通过Git</a> bash依次执行npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;</li><li>修改_config.yml中的deploy参数，分支应为master；</li><li>依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件；</li><li>执行hexo g -d生成网站并部署到GitHub上。</li></ol><p>这样一来，在GitHub上的<a href="https://link.zhihu.com/?target=http%3A//CrazyMilk.github.io" target="_blank" rel="noopener">http://CrazyMilk.github.io</a>仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！</p><p>二、关于日常的改动流程<br>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理。</p><p>\1. 依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）；<br>\2. 然后才执行hexo g -d发布网站到master分支上。</p><p>虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。</p><p>三、本地资料丢失后的流程<br>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p><p>\1. 使用git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:CrazyMilk/CrazyMilk.github.io.git拷贝仓库（默认分支为hexo）；<br>\2. 在本地新拷贝的<a href="https://link.zhihu.com/?target=http%3A//CrazyMilk.github.io" target="_blank" rel="noopener">http://CrazyMilk.github.io</a>文件夹下通过Git bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。</p><p>———————————————————-  华丽的分割线2 ———————————————————-</p><p>以上就是我采用的方法，虽说文字有点多，但是我个人觉得真的挺高效和简洁的。更详细的可以参考我刚写的博文：<a href="https://link.zhihu.com/?target=http%3A//crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/%23more" target="_blank" rel="noopener">GitHub Pages + Hexo搭建博客</a>。</p><p>第一次回答问题，略紧张呢 ( •̀ ω •́ )y</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>参考链接：</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客搭建 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
